{"name": "test_search_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6e4f63d85+79397]\n\tGetHandleVerifier [0x0x7ff6e4f63de0+79488]\n\t(No symbol) [0x0x7ff6e4d0c0fa]\n\t(No symbol) [0x0x7ff6e4ce4601]\n\t(No symbol) [0x0x7ff6e4d9257e]\n\t(No symbol) [0x0x7ff6e4db2c72]\n\t(No symbol) [0x0x7ff6e4d8af73]\n\t(No symbol) [0x0x7ff6e4d541b1]\n\t(No symbol) [0x0x7ff6e4d54f43]\n\tGetHandleVerifier [0x0x7ff6e522e1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6e522831d+2980797]\n\tGetHandleVerifier [0x0x7ff6e5247e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6e4f7d6de+184190]\n\tGetHandleVerifier [0x0x7ff6e4f8516f+215567]\n\tGetHandleVerifier [0x0x7ff6e4f6c974+115220]\n\tGetHandleVerifier [0x0x7ff6e4f6cb29+115657]\n\tGetHandleVerifier [0x0x7ff6e4f53268+11016]\n\tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\n\tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]", "trace": "self = <pages.select_flight_page.SelectFlightPage object at 0x0000014903019FD0>, locator = ('class name', 'journey_price_button'), label = 'wait element'\n\n    def wait_for_element(self, locator, label=\"wait element\"):\n        try:\n>           self.wait.until(EC.presence_of_element_located(locator))\n\npages\\base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:104: in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014903018D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff6e4f53268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4f63d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6e4f63de0+79488]\nE       \t(No symbol) [0x0x7ff6e4d0c0fa]\nE       \t(No symbol) [0x0x7ff6e4ce4601]\nE       \t(No symbol) [0x0x7ff6e4d9257e]\nE       \t(No symbol) [0x0x7ff6e4db2c72]\nE       \t(No symbol) [0x0x7ff6e4d8af73]\nE       \t(No symbol) [0x0x7ff6e4d541b1]\nE       \t(No symbol) [0x0x7ff6e4d54f43]\nE       \tGetHandleVerifier [0x0x7ff6e522e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6e522831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6e5247e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6e4f7d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6e4f8516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6e4f6c974+115220]\nE       \tGetHandleVerifier [0x0x7ff6e4f6cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6e4f53268+11016]\nE       \tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.select_flight_page.SelectFlightPage object at 0x0000014903019FD0>, index = 1\n\n    @allure.step(\"Select  flight {index}\")\n    def select_fare_by_index(self, index=1):\n        try:\n>           self.wait_for_element((By.CLASS_NAME, \"journey_price_button\"))\n\npages\\select_flight_page.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\base_page.py:26: in wait_for_element\n    self.capture(f\"Error waiting {label}\")\npages\\base_page.py:16: in capture\n    self.driver.get_screenshot_as_png(),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1034: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1044: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014903018D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff6e4f53268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4f63d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6e4f63de0+79488]\nE       \t(No symbol) [0x0x7ff6e4d0c0fa]\nE       \t(No symbol) [0x0x7ff6e4ce4601]\nE       \t(No symbol) [0x0x7ff6e4d9257e]\nE       \t(No symbol) [0x0x7ff6e4db2c72]\nE       \t(No symbol) [0x0x7ff6e4d8af73]\nE       \t(No symbol) [0x0x7ff6e4d541b1]\nE       \t(No symbol) [0x0x7ff6e4d54f43]\nE       \tGetHandleVerifier [0x0x7ff6e522e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6e522831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6e5247e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6e4f7d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6e4f8516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6e4f6c974+115220]\nE       \tGetHandleVerifier [0x0x7ff6e4f6cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6e4f53268+11016]\nE       \tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfb42c680cc80af73f54aa037fa44bdb\")>\n\n    def test_search_flow(driver):\n        driver.get(\"https://av-booking-dev.newshore.es/es/\")\n        search = SearchPage(driver)\n        search.accept_cookies((By.ID,\"onetrust-accept-btn-handler\"))\n        search.capture(\"Accept Cookies\")\n        search.select_origin(\"Medellin\", \"MDE\")\n        #WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, \"arrivalStationInputId\")))\n        search.select_destination(\"Bogota\", \"BOG\")\n        search.select_date_origin(\"22-10-2025\")\n        search.select_date_destination(\"26-10-2025\")\n        #search.select_passengers_by_type(passenger_type=1) #passengers by type\n        search.select_passengers_dynamic([1,2,1,3])\n        code_passengers = [1,2,1,3]\n        type_for_passengers = map_types_by_code(code_passengers)\n        search.validate_total_passengers(5)\n        search.click_search_button()\n    \n        # select fligth\n        select = SelectFlightPage(driver)\n>       select.select_fare_by_index(index=1)\n\ntests\\test_search_flow.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\select_flight_page.py:21: in select_fare_by_index\n    self.capture(f\"Error select   flight {index}\")\npages\\base_page.py:16: in capture\n    self.driver.get_screenshot_as_png(),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1034: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1044: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014903018D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff6e4f53268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4f63d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6e4f63de0+79488]\nE       \t(No symbol) [0x0x7ff6e4d0c0fa]\nE       \t(No symbol) [0x0x7ff6e4ce4601]\nE       \t(No symbol) [0x0x7ff6e4d9257e]\nE       \t(No symbol) [0x0x7ff6e4db2c72]\nE       \t(No symbol) [0x0x7ff6e4d8af73]\nE       \t(No symbol) [0x0x7ff6e4d541b1]\nE       \t(No symbol) [0x0x7ff6e4d54f43]\nE       \tGetHandleVerifier [0x0x7ff6e522e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6e522831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6e5247e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6e4f7d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6e4f8516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6e4f6c974+115220]\nE       \tGetHandleVerifier [0x0x7ff6e4f6cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6e4f53268+11016]\nE       \tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "steps": [{"name": "Accept Cookies", "status": "passed", "parameters": [{"name": "locator", "value": "('id', 'onetrust-accept-btn-handler')"}], "start": 1758055107954, "stop": 1758055107973}, {"name": "Select origen: 'Medellin' ('MDE')", "status": "passed", "attachments": [{"name": "Select origen (Medellin, MDE)", "source": "a1cc63cd-6b2c-466c-aded-86648e014541-attachment.png", "type": "image/png"}], "parameters": [{"name": "city", "value": "'Medellin'"}, {"name": "code", "value": "'MDE'"}], "start": 1758055108657, "stop": 1758055111393}, {"name": "Select destination: 'Bogota' ('BOG')", "status": "passed", "attachments": [{"name": "Select destination ({city}, {code})", "source": "1e596756-54c8-4c7c-9b19-d8d525e41c1b-attachment.png", "type": "image/png"}], "parameters": [{"name": "city", "value": "'Bogota'"}, {"name": "code", "value": "'BOG'"}], "start": 1758055111393, "stop": 1758055113231}, {"name": "Select date origen: '22-10-2025' ", "status": "passed", "attachments": [{"name": "Select date origen (22-10-2025)", "source": "a8d18659-1396-446d-a651-77facb3237d0-attachment.png", "type": "image/png"}], "parameters": [{"name": "departure_data_str", "value": "'22-10-2025'"}], "start": 1758055113231, "stop": 1758055114240}, {"name": "Select date destination: '26-10-2025' ", "status": "passed", "attachments": [{"name": "Select date destination (26-10-2025)", "source": "a1d46402-7b7d-4870-b6ca-0795a8c76583-attachment.png", "type": "image/png"}], "parameters": [{"name": "arrival_data_str", "value": "'26-10-2025'"}], "start": 1758055114241, "stop": 1758055114693}, {"name": "Select passenger dynamic", "status": "passed", "steps": [{"name": "select passenger 1", "status": "passed", "attachments": [{"name": "Select passenger 1", "source": "33a15aba-8365-4234-936d-302e82e59148-attachment.png", "type": "image/png"}], "parameters": [{"name": "passenger_type", "value": "1"}], "start": 1758055114693, "stop": 1758055115119}, {"name": "select passenger 2", "status": "passed", "attachments": [{"name": "Select passenger 2", "source": "8ea21ff4-888e-4846-8487-a4b18cd12b74-attachment.png", "type": "image/png"}], "parameters": [{"name": "passenger_type", "value": "2"}], "start": 1758055115120, "stop": 1758055115553}, {"name": "select passenger 1", "status": "passed", "attachments": [{"name": "Select passenger 1", "source": "ec92bf5b-a46c-4b29-8931-9188b5dea978-attachment.png", "type": "image/png"}], "parameters": [{"name": "passenger_type", "value": "1"}], "start": 1758055115553, "stop": 1758055115858}, {"name": "select passenger 3", "status": "passed", "attachments": [{"name": "Select passenger 3", "source": "63b0359a-be7c-4f7c-8807-462284f74902-attachment.png", "type": "image/png"}], "parameters": [{"name": "passenger_type", "value": "3"}], "start": 1758055115858, "stop": 1758055116181}, {"name": "validation of passengers 4", "status": "passed", "parameters": [{"name": "expected_count", "value": "4"}], "start": 1758055116181, "stop": 1758055116194}], "attachments": [{"name": "Select passenger dynamic", "source": "4faec2d4-b5fa-4e78-9c17-c9d9a42253a8-attachment.png", "type": "image/png"}], "parameters": [{"name": "types", "value": "[1, 2, 1, 3]"}], "start": 1758055114693, "stop": 1758055116316}, {"name": "validation of passengers 5", "status": "passed", "parameters": [{"name": "expected_count", "value": "5"}], "start": 1758055116316, "stop": 1758055116327}, {"name": "Click search button ('id', 'searchButton')", "status": "passed", "attachments": [{"name": "Click search button ('id', 'searchButton')", "source": "aacae6bc-dd1e-4423-b439-49996f6545b3-attachment.png", "type": "image/png"}], "parameters": [{"name": "locator", "value": "('id', 'searchButton')"}], "start": 1758055116327, "stop": 1758055117172}, {"name": "Select  flight 1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6e4f63d85+79397]\n\tGetHandleVerifier [0x0x7ff6e4f63de0+79488]\n\t(No symbol) [0x0x7ff6e4d0c0fa]\n\t(No symbol) [0x0x7ff6e4ce4601]\n\t(No symbol) [0x0x7ff6e4d9257e]\n\t(No symbol) [0x0x7ff6e4db2c72]\n\t(No symbol) [0x0x7ff6e4d8af73]\n\t(No symbol) [0x0x7ff6e4d541b1]\n\t(No symbol) [0x0x7ff6e4d54f43]\n\tGetHandleVerifier [0x0x7ff6e522e1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6e522831d+2980797]\n\tGetHandleVerifier [0x0x7ff6e5247e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6e4f7d6de+184190]\n\tGetHandleVerifier [0x0x7ff6e4f8516f+215567]\n\tGetHandleVerifier [0x0x7ff6e4f6c974+115220]\n\tGetHandleVerifier [0x0x7ff6e4f6cb29+115657]\n\tGetHandleVerifier [0x0x7ff6e4f53268+11016]\n\tBaseThreadInitThunk [0x0x7ff8a51ce8d7+23]\n\tRtlUserThreadStart [0x0x7ff8a6d1c34c+44]\n\n", "trace": "  File \"C:\\Proyecto pycharm\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Proyecto pycharm\\pages\\select_flight_page.py\", line 21, in select_fare_by_index\n    self.capture(f\"Error select   flight {index}\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Proyecto pycharm\\pages\\base_page.py\", line 16, in capture\n    self.driver.get_screenshot_as_png(),\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Proyecto pycharm\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1034, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Proyecto pycharm\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1044, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Proyecto pycharm\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Proyecto pycharm\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "index", "value": "1"}], "start": 1758055117172, "stop": 1758055129157}], "attachments": [{"name": "Accept Cookies", "source": "72ca801e-b1d8-4914-98d6-51ced5d9fc9d-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "abd0dc80-9f73-462c-bac3-85471878be4d-attachment.txt", "type": "text/plain"}], "start": 1758055105025, "stop": 1758055129163, "uuid": "a2aaace4-bb1b-4474-b361-80fcb9175fa3", "historyId": "570568e184b21b9449d5ccd2136420b2", "testCaseId": "570568e184b21b9449d5ccd2136420b2", "fullName": "tests.test_search_flow#test_search_flow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_search_flow"}, {"name": "host", "value": "DESKTOP-QCGAJ37"}, {"name": "thread", "value": "12588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_search_flow"}], "titlePath": ["tests", "test_search_flow.py"]}